#include <iostream>
#include <thread>
#include <mutex>
#include <chrono>
#include <atomic>
#include <signal.h>

using namespace std;

mutex mtx; // mutex para exclusión mutua
atomic<bool> running{true}; // señal de salida
chrono::steady_clock::time_point start_time; // tiempo de inicio del programa
const chrono::seconds program_duration{10}; // duración del programa en segundos

enum class ProcessState { Ready, Running, Blocked };

void process_thread(int id) {
    ProcessState state = ProcessState::Ready;

    while (running && chrono::steady_clock::now() - start_time < program_duration) {
        // Bloquear el mutex
        mtx.lock();

        // Simular el estado del proceso
        switch (state) {
        case ProcessState::Ready:
            cout << "Proceso " << id << " en estado LISTO" << endl;
            state = ProcessState::Running;
            break;
        case ProcessState::Running:
            cout << "Proceso " << id << " en estado EJECUCIÓN" << endl;
            this_thread::sleep_for(chrono::milliseconds(rand() % 1000));
            state = ProcessState::Blocked;
            break;
        case ProcessState::Blocked:
            cout << "Proceso " << id << " en estado BLOQUEADO" << endl;
            state = ProcessState::Ready;
            break;
        }

        // Desbloquear el mutex
        mtx.unlock();

        // Esperar un tiempo aleatorio antes de continuar
        this_thread::sleep_for(chrono::milliseconds(rand() % 500));
    }
}

void signalHandler(int signal) {
    running = false; // establecer la señal de salida en false
}

int main() {
    // Registrar el manejador de señal para Ctrl+C
    signal(SIGINT, signalHandler);

    // Almacenar el tiempo de inicio del programa
    start_time = chrono::steady_clock::now();

    // Iniciar 3 procesos
    thread p1(process_thread, 1);
    thread p2(process_thread, 2);
    thread p3(process_thread, 3);

    // Esperar a que los procesos terminen
    p1.join();
    p2.join();
    p3.join();

    return 0;
}
