#include <iostream>
#include <thread>
#include <mutex>

using namespace std;

mutex myLock; // Renamed mutex to myLock

struct Task { // New structure to hold process information
  int id;
  string status;
};

void workerThread(const Task& task) {
  while (true) {
    myLock.lock();
    cout << "Task " << task.id << " is " << task.status << endl;
    this_thread::sleep_for(chrono::seconds(1));
    myLock.unlock();
  }
}

int main() {
  Task task1{1, "prepared"}; // Use initializer list for Task objects
  Task task2{2, "running"};
  Task task3{3, "waiting"};

  thread worker1(workerThread, task1);
  thread worker2(workerThread, task2);
  thread worker3(workerThread, task3);

  worker1.join();
  worker2.join();
  worker3.join();

  return 0;
}

